{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True"}
{"task_id": "HumanEval/1", "completion": "groups = []\n    group = ''\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        group += char\n\n        if balance == 0:\n            groups.append(group)\n            group = ''\n\n    return groups"}
{"task_id": "HumanEval/2", "completion": "return abs(number) % 1"}
{"task_id": "HumanEval/3", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimiter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "levels = []\n    current_level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n    return [max_level]"}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "rolling_max_min_list = []\n    for i in range(len(numbers)):\n        rolling_max_min_list.append((max(numbers[i:]), min(numbers[i:])))\n    return rolling_max_min_list"}
{"task_id": "HumanEval/10", "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            return string[:i+1] + string[::-1][:i+1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "if len(a) != len(b):\n        raise ValueError('Input strings must have the same length')\n    return ''.join(str(int(a[i] != b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "notes_map = {'o': 4,  # whole note\n        'o|': 2,  # half note\n        '.|': 1  # quarter note\n    }\n    \n    notes = music_string.split()\n    beats = [notes_map.get(note, 0) for note in notes]\n    \n    return beats"}
{"task_id": "HumanEval/18", "completion": "count = 0\n    if substring == '':\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "return \" \".join(sorted(numbers.split()))"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "return [float(i - min(numbers)) / float(max(numbers) - min(numbers)) for i in numbers]"}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "completion": "return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])"}
{"task_id": "HumanEval/33", "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        l_prime[i:i+3] = sorted(l_prime[i:i+3])\n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "return max(l)"}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "l_even = [l[i] for i in range(0, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    return l_even + l_odd"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l)):\n        if l[i] in seen:\n            continue\n        seen.add(l[i])\n        if len(seen) == 3:\n            return True\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] in seen:\n                continue\n            seen.add(l[i] + l[j])\n            if len(seen) == 3:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False"}
{"task_id": "HumanEval/44", "completion": "if x == 0:\n        return '0'\n\n    res = ''\n    while x > 0:\n        remainder = x % base\n        res = str(remainder) + res\n        x //= base\n\n    return res"}
{"task_id": "HumanEval/45", "completion": "return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n    \n    for i in range(4, n + 1):\n        sum_fib = sum(fib)\n        fib[0] = fib[1]\n        fib[1] = fib[2]\n        fib[2] = fib[3]\n        fib[3] = sum_fib\n\n    return fib[3]"}
{"task_id": "HumanEval/47", "completion": "l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2"}
{"task_id": "HumanEval/48", "completion": "if text is None:\n        return False\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "return ''.join([char for char in text if char.lower() not in 'aeiou'])"}
{"task_id": "HumanEval/52", "completion": " return all(t1 < x < t2 for x in l)"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "return sorted(set(l1).intersection(l2))"}
{"task_id": "HumanEval/59", "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "return [xs[i] * (i + 1) for i in range(len(xs))]"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "count = 0\n    for c in s:\n        if c.lower() in \"aeiouy\" and c.lower() != \"y\" or c.lower() == \"y\" and s[-1] == c:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[shift:] + s[:shift]"}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[2])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "smallest_value = None\n    smallest_index = None\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_value is None or node < smallest_value:\n                smallest_value = node\n                smallest_index = i\n    return [smallest_value, smallest_index] if smallest_value is not None else []"}
{"task_id": "HumanEval/69", "completion": "lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 1 and lst[i] > lst[i-1]:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "completion": "result = []\n    lst.sort()  # Sort the list in ascending order\n    while lst:\n        result.append(lst.pop(0))  # Add the minimum element\n        if lst:  # Check if the list is not empty\n            result.append(lst.pop())  # Add the maximum element\n    return result"}
{"task_id": "HumanEval/71", "completion": "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1fe"}
{"task_id": "HumanEval/72", "completion": "if q == []:\n        return False\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    arr = list(map(int, arr))\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = abs(arr[i] - arr[i + 1])\n    for i in range(n - 2):\n        for j in range(i + 2, n):\n            dp[i][j] = min(dp[i][j], dp[i + 1][j - 1] + abs(arr[i] - arr[j]))\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/74", "completion": "lst1_len = sum([len(i) for i in lst1])\n    lst2_len = sum([len(i) for i in lst2])\n    if lst1_len < lst2_len:\n        return lst1\n    elif lst1_len > lst2_len:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": " if a >= 100:\n        return False\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "return x == n ** int(log(x, n))"}
{"task_id": "HumanEval/77", "completion": "cube_root = a ** (1/3)\n    return cube_root.is_integer()"}
{"task_id": "HumanEval/78", "completion": "count = 0\n    for i in num:\n        if is_prime(int(i, 16)):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/79", "completion": "return int(binary[2:-2], 2)"}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "if len(string) == 0:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "return ' '.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))"}
{"task_id": "HumanEval/87", "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    \n    # Sort by row in ascending order and then sort by column in descending order\n    result.sort(key=lambda tup: tup[0])  # Sort by row in ascending order\n    result.sort(key=lambda tup: tup[1], reverse=True)  # Sort by column in descending order\n    \n    return result"}
{"task_id": "HumanEval/88", "completion": "if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "return ''.join([chr((ord(c) - ord('a') + 24) % 26 + ord('a')) for c in s])"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "sentences = [sentence.strip() for sentence in S.split('.') + S.split('?') + S.split('!')]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/92", "completion": "if x == y + z and type(x) == int and type(y) == int and type(z) == int:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "return message.swapcase().replace('a', 'c').replace('e', 'g').replace('i', 'k').replace('o', 's').replace('u', 'x').replace('y', 'z')\n\ndef decode(message):\n"}
{"task_id": "HumanEval/94", "completion": "if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "completion": "if not d:\n        return False\n    keys = d.keys()\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "return [x for x in range(2, n) if all(x % y != 0 for y in range(2, int(x ** 0.5) + 1))]"}
{"task_id": "HumanEval/97", "completion": "return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].islower():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "return int(round(float(value)))": "pile = [n]\n    current_stones = n\n\n    for _ in range(n - 1):\n        if current_stones % 2 == 0:\n            current_stones += 1\n        else:\n            current_stones += 2\n        pile.append(current_stones)\n\n    return pile"}
{"task_id": "HumanEval/100", "completion": "    return [n] + make_a_pile(n + 1)"}
{"task_id": "HumanEval/101", "completion": "return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "# Initialize the result as -1\n    result = -1\n    \n    # Iterate over the range [y, x] in reverse\n    for num in range(y, x-1, -1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Update the result and break the loop\n            result = num\n            break\n    \n    return result"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    else:\n        return bin(round((sum(range(n, m + 1)) / (m - n + 1))))[2:]"}
{"task_id": "HumanEval/104", "completion": "return sorted([i for i in x if not any(j % 2 == 0 for j in str(i))])"}
{"task_id": "HumanEval/105", "completion": "num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    valid_numbers = [num_to_name[num] for num in sorted(arr) if 1 <= num <= 9]\n    valid_numbers.reverse()\n\n    return valid_numbers"}
{"task_id": "HumanEval/106", "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for num in range(1, i + 1):\n                factorial *= num\n            result.append(factorial)\n        else:\n            total = sum(range(1, i + 1))\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "completion": "# Write your code here\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "return sum(1 for x in arr if sum(map(abs, str(x))) > 0)"}
{"task_id": "HumanEval/109", "completion": "if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    rotations = 0\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]  # Perform one right shift operation\n        rotations += 1\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    # Your code here\n    if not test:\n        return {}\n    else:\n        test = test.split(' ')\n        test = [x for x in test if x]\n        test = dict.fromkeys(test, 0)\n        for x in test:\n            test[x] += 1\n        test = {x: test[x] for x in test if test[x] == max(test.values())}\n        return test"}
{"task_id": "HumanEval/112", "completion": "s = s.replace(c, '')\n    return s, s == s[::-1]\n\nprint(reverse_delete('abcde', 'ae'))"}
{"task_id": "HumanEval/113", "completion": "result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output = f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\"\n        result.append(output)\n    return result"}
{"task_id": "HumanEval/114", "completion": "if not nums:\n        return 0\n\n    curr_sum = min_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "# Initialize the number of times we need to lower the buckets\n    num_times = 0\n\n    for well in grid:\n        well_units = sum(well)\n        num_times += math.ceil(well_units / capacity)\n\n    return num_times"}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "words = s.split()\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    selected_words = []\n    for word in words:\n        if len(word) == n:\n            if all(letter in consonants for letter in word):\n                selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if word[i+1] not in vowels:\n                return word[i]"}
{"task_id": "HumanEval/119", "completion": "count_open = 0\n    count_close = 0\n\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count_open += 1\n            elif char == ')':\n                if count_open > 0:\n                    count_open -= 1\n                else:\n                    return 'No'\n\n    if count_open == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "# Edge case\n    if k == 0:\n        return 0\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the sum\n    sum = 0\n\n    # Iterate through the first k elements\n    for i in range(k):\n        # Add the current element to the sum\n        sum += arr[i]\n\n    return sum"}
{"task_id": "HumanEval/123", "completion": "odd_list = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_list.append(n)\n    return sorted(odd_list)"}
{"task_id": "HumanEval/124", "completion": "# Your code here\n    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list) != 3:\n            return False\n        else:\n            month = int(date_list[0])\n            day = int(date_list[1])\n            year = int(date_list[2])\n            if month < 1 or month > 12:\n                return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1 or day > 31:\n                    return False\n            elif month in [4, 6, 9, 11]:\n                if day < 1 or day > 30:\n                    return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 31:\n                    return False\n            if year < 0:\n                return False\n            return True"}
{"task_id": "HumanEval/125", "completion": "if txt.find(' ') != -1:\n        return txt.split()\n    elif txt.find(',') != -1:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if txt.lower().find(chr(i)) != -1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "# Your code here\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "# Your code here\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        if i == 0:\n            prod *= 0\n        elif i > 0:\n            prod *= 1\n        else:\n            prod *= -1\n    return prod"}
{"task_id": "HumanEval/129", "completion": "    # Initialize the grid with the values\n    grid = [[(i, j) for j in range(len(grid[0]))] for i in range(len(grid))]"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "result = 1\n    all_even = True\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n            all_even = False\n        n //= 10\n\n    if all_even:\n        return 0\n    else:\n        return result"}
{"task_id": "HumanEval/132", "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "return sum(map(lambda x: int(x) ** 2, map(lambda x: int(x) + 1, lst)))"}
{"task_id": "HumanEval/134", "completion": "if txt[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "# Write your code here\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = can_arrange(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")"}
{"task_id": "HumanEval/136", "completion": "# Your code here\n    largest_negative = None\n    smallest_positive = None\n    for i in lst:\n        if i < 0 and (largest_negative is None or i > largest_negative):\n            largest_negative = i\n        elif i > 0 and (smallest_positive is None or i < smallest_positive):\n            smallest_positive = i\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "return n % 8 == 0\n\ndef is_equal_to_sum_odd(n):\n    return n % 8 == 1\n\ndef is_equal_to_sum_even_odd(n):\n    return n % 8 == 2\n\ndef is_equal_to_sum_odd_even(n):\n    return n % 8 == 3\n\ndef is_equal_to_sum_even_odd_even(n):\n    return n % 8 == 4\n\ndef is_equal_to_sum_odd_even_odd(n):\n    return n % 8 == 5\n\ndef is_equal_to_sum_even_odd_even_odd(n):\n    return n % 8 == 6\n\ndef is_equal_to_sum_odd_even_even_odd(n):\n    return n % 8 == 7"}
{"task_id": "HumanEval/139", "completion": "if n < 0:\n        raise ValueError(\"n must be positive\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0] or not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0 and i != 0:  # Corrected condition\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    if x_num * n_den == x_den * n_num:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "# Your code here\n    nums.sort(key=lambda x: sum(map(int, str(abs(x)))))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1 = planets.index(planet1)\n        planet2 = planets.index(planet2)\n        if planet1 > planet2:\n            planet1, planet2 = planet2, planet1\n        return tuple(planets[planet1+1:planet2])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort(key=len)\n    return lst"}
{"task_id": "HumanEval/150", "completion": "if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "lst = [abs(int(i)) for i in lst if i > 0 and i % 2 != 0]\n    return sum([i**2 for i in lst])"}
{"task_id": "HumanEval/152", "completion": "return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "# Your code here\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n            elif char.islower():\n                strength -= 1\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    elif len(a) == len(b):\n        if a == b:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(b)):\n            if b in a:\n                return True\n            else:\n                b = b[1:] + b[0]\n                if b in a:\n                    return True\n                else:\n                    return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = ''\n    while number > 0:\n        for i in range(len(values)):\n            if number >= values[i]:\n                number -= values[i]\n                result += roman_numerals[i]\n                break\n    return result"}
{"task_id": "HumanEval/157", "completion": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "max_unique_chars = 0\n    max_unique_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_word = word\n        elif unique_chars == max_unique_chars and word < max_unique_word:\n            max_unique_word = word\n            \n    return max_unique_word"}
{"task_id": "HumanEval/159", "completion": "return [number + need, remaining - number]"}
{"task_id": "HumanEval/160", "completion": "result = 0\n    for i in range(len(operator)):\n        result = result + operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "new_s = ''\n    has_letters = any(char.isalpha() for char in s)\n\n    if not has_letters:\n        return s[::-1]\n\n    for char in s:\n        if char.isalpha():\n            new_s += char.upper() if char.islower() else char.lower()\n        else:\n            new_s += char\n\n    return new_s"}
{"task_id": "HumanEval/162", "completion": "if text == '':\n        return None\n    else:\n        return hashlib.sha3_256(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "return [x for x in range(a, b+1) if x % 2 == 0]"}
