{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Separates groups of nested parentheses into separate strings and returns a list of those groups.\"\"\"\n    result = []\n    count = 0\n    current_group = ''\n    \n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        current_group += char\n        \n        if count == 0:\n            result.append(current_group)\n            current_group = ''\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, return the decimal part of the number.\n\n    Examples:\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(7.123)\n    0.123\n    >>> truncate_number(10.0)\n    0.0\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detects if the balance of account falls below zero at any point based on a list of deposit and withdrawal operations.\n\n    :param operations: List of deposit and withdrawal operations\n    :return: True if balance falls below zero, False otherwise\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation (MAD) around the mean of the dataset.\n\n    Args:\n        numbers (List[float]): List of input numbers.\n\n    Returns:\n        float: Mean Absolute Deviation of the input numbers.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    :param paren_string: Input string containing groups of nested parentheses separated by spaces\n    :return: List of integers representing the maximum nesting depth for each group\n    \"\"\"\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n                if depth < 0:  # Handle invalid parentheses\n                    raise ValueError(\"Invalid parentheses in input string\")\n        if depth != 0:  # Handle invalid parentheses\n            raise ValueError(\"Invalid parentheses in input string\")\n        depths.append(max_depth)\n    return depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = reduce(operator.mul, numbers, 1)\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_numbers.append(current_max)\n    return max_numbers"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n    \n    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Examples:\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n\n    Examples:\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        return []\n    \n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n < 0:\n        raise ValueError(\"Input value must be non-negative\")\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Dictionary mapping note strings to their corresponding durations\n    notes_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input music string into individual notes\n    music_notes = music_string.split()\n    \n    # Retrieve the durations for each note using the dictionary\n    durations = [notes_duration.get(note, 0) for note in music_notes]\n    \n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n\n    Args:\n        string: The original string to search in.\n        substring: The substring to search for in the original string.\n\n    Returns:\n        The number of times the substring can be found in the original string.\n    \"\"\"\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers: A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        A string with numerals sorted from smallest to largest.\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter the list of values and return only the integers.\n\n    Args:\n        values (List[Any]): List of values of any type.\n\n    Returns:\n        List[int]: List of integers filtered from the input list.\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return the length of the given string.\n\n    Parameters:\n    string (str): The input string for which the length needs to be calculated.\n\n    Returns:\n    int: The length of the input string.\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n <= 1:\n        return []\n    \n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove duplicates from a list of integers while maintaining the order of elements.\n\n    Args:\n        numbers: List of integers.\n\n    Returns:\n        List of integers with duplicates removed.\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    \"\"\"\n    num_count = {}\n    result = []\n    for num in numbers:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n\n    for num in numbers:\n        if num_count[num] == 1:\n            result.append(num)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return a list containing only positive numbers from the input list.\n\n    Args:\n    l (list): Input list containing integers.\n\n    Returns:\n    list: List containing only positive numbers from the input list.\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients should be even\")\n    \n    def f(x):\n        return poly(xs, x)\n    \n    # Use Newton's method to find the zero point of the polynomial\n    x0 = 0.0  # Initial guess\n    max_iter = 1000\n    tol = 1e-6\n    \n    for _ in range(max_iter):\n        fx0 = f(x0)\n        if abs(fx0) < tol:\n            return x0\n        f_prime_x0 = (f(x0 + tol) - fx0) / tol\n        x0 = x0 - fx0 / f_prime_x0\n    \n    raise ValueError(\"Could not find zero point within the maximum number of iterations\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible_by_three = sorted([l[i] for i in range(0, len(l), 3)])\n\n    result = []\n    non_divisible_index = 0\n    divisible_index = 0\n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(non_divisible_by_three[non_divisible_index])\n            non_divisible_index += 1\n        else:\n            result.append(divisible_by_three[divisible_index])\n            divisible_index += 1\n\n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list.\n\n    Args:\n    l (list): Input list containing elements.\n\n    Returns:\n    list: Sorted list of unique elements from the input list.\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    Args:\n    n (int): The upper limit for integers to consider\n    \n    Returns:\n    int: The count of occurrences of digit 7 in numbers less than n divisible by 11 or 13\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted([x for x in l[::2]])\n    result = [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function calculates the number of collisions that occur when n cars moving left to right\n    collide with n cars moving right to left.\n\n    Formula to calculate the number of collisions: n * (n - 1) // 2\n\n    Args:\n    n (int): Number of cars moving in each direction\n\n    Returns:\n    int: Number of collisions that occur\n    \"\"\"\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return a new list with elements incremented by 1.\n\n    Args:\n    l (list): Input list of integers.\n\n    Returns:\n    list: New list with each element incremented by 1.\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x < 0:\n        return '-' + change_base(-x, base)\n    elif x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given the length of a side and height, return the area of a triangle.\n    \n    Formula: 0.5 * base * height\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    If the list is empty, return None.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return None\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    \n    result = all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return result"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    common_elements = sorted(set(l1) & set(l2))\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Check if every opening bracket has a corresponding closing bracket.\n\n    Args:\n    brackets (str): A string of \"(\" and \")\".\n\n    Returns:\n    bool: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"Calculate the derivative of a polynomial represented by a list of coefficients.\n\n    Args:\n        xs (list): Coefficients of the polynomial.\n\n    Returns:\n        list: Coefficients of the derivative polynomial.\n\n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n    \"\"\"\n    if len(xs) < 2:\n        return []\n    \n    return [xs[i+1] * (i+1) for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n\n    The FibFib number sequence is defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        first, second, third = 0, 0, 1\n        for _ in range(3, n + 1):\n            first, second, third = second, third, first + second + third\n        return third"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i].lower() == 'y':\n            count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected Output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected Output: 3\nprint(vowels_count(\"hello\"))  # Expected Output: 2\nprint(vowels_count(\"programming\"))  # Expected Output: 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    if s is None:\n        return 0\n    \n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    try:\n        apples = int(s.split(' ')[0])\n        oranges = int(s.split(' ')[3])\n        mango = n - apples - oranges\n        return mango\n    except (IndexError, ValueError):\n        return \"Invalid input format\"\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_even_index = -1\n\n    for i, x in enumerate(arr):\n        if x % 2 == 0 and x < min_even:\n            min_even = x\n            min_even_index = i\n\n    if min_even_index == -1:\n        return []\n    \n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and freq_dict[num] >= num:\n            max_num = max(max_num, num)\n\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    start = 0\n    end = len(lst) - 1\n\n    while start <= end:\n        result.append(lst[start])\n        if start != end:\n            result.append(lst[end])\n        start += 1\n        end -= 1\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(i, a):\n                if is_prime(j):\n                    for k in range(j, a):\n                        if is_prime(k) and i * j * k == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if a number x is a simple power of n, False otherwise.\n    \n    x is a simple power of n if n**int=x.\n    \n    Args:\n    x (int): The number to check if it is a simple power of n.\n    n (int): The base number.\n    \n    Returns:\n    bool: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x <= 0 or n <= 0:\n        return False\n    \n    power = x ** (1/n)\n    return power.is_integer() and n ** int(power) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format with 'db' at the beginning and end.\"\"\"\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 * 10 ** (n - 2)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    if not 0 <= N <= 10000:\n        return \"Input value out of range\"\n    \n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Args:\n        lst (list): A non-empty list of integers.\n        \n    Returns:\n        int: Sum of even elements at odd indices in the list.\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string where characters in each word are arranged in ascending order based on ASCII value.\n    \n    Args:\n    s: Input string\n    \n    Returns:\n    Ordered version of the input string\n    \n    Example:\n    >>> anti_shuffle('Hi')\n    'Hi'\n    >>> anti_shuffle('hello')\n    'ehllo'\n    >>> anti_shuffle('Hello World!!!')\n    'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()\n    ordered_words = [''.join(sorted(word, key=lambda x: ord(x) if x.isalpha() else ord('z')+1)) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet down by two multiplied to two places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                encrypted += chr((shift - ord('a')) % 26 + ord('a'))\n            else:\n                encrypted += chr((shift - ord('A')) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    unique_nums = sorted(set(lst))\n    \n    if len(unique_nums) < 2:\n        return None\n    \n    return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case of all letters and replacing vowels with the letter that appears 2 places ahead in the alphabet.\n    \n    Args:\n        message (str): The input message to be encoded.\n    \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def find_largest_prime_sum_of_digits(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(input_dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not input_dict:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in input_dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in input_dict if isinstance(key, str))\n    \n    return lowercase_keys or uppercase_keys"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Generate an array of the first n prime numbers less than n.\n\n    Args:\n    n (int): A non-negative integer.\n\n    Returns:\n    list: An array of the first n prime numbers less than n.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        return []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return abs(a % 10) * abs(b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Split the input string into words separated by commas or spaces and return an array of words.\n\n    Args:\n    s: Input string containing words separated by commas or spaces.\n\n    Returns:\n    List of words extracted from the input string.\n    \"\"\"\n    if not s:\n        return []\n\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Mapping of integers to their corresponding names\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter valid numbers between 1 and 9\n    valid_numbers = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort, reverse, and map to names\n    sorted_numbers = sorted(valid_numbers)\n    reversed_numbers = sorted_numbers[::-1]\n    result = [mapping[num] for num in reversed_numbers]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    if n < 1:\n        return []\n    \n    result = []\n    factorial = 1\n    total_sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial *= i\n            result.append(factorial)\n        else:\n            total_sum += i\n            result.append(total_sum)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr = arr[-1:] + arr[:-1]\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    sum1 = sum(x % 2 for x in lst1)\n    sum2 = sum(x % 2 for x in lst2)\n    \n    return \"YES\" if sum1 <= sum2 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    \n    You should return a tuple containing the result string and True/False for the check.\n    \n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    \n    # Remove characters in s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the result is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count_str = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count_str} in the str{odd_count_str}ng {s} of the {odd_count_str}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    Calculate the number of times the buckets need to be lowered to empty the wells.\n\n    Args:\n    grid (List[List[int]]): A rectangular grid of wells where each row represents a well.\n    capacity (int): The capacity of the buckets used to extract water.\n\n    Returns:\n    int: The number of times the buckets need to be lowered.\n\n    Constraints:\n    - All wells have the same length.\n    - 1 <= len(grid) <= 10^2\n    - 1 <= len(grid[0]) <= 10^2\n    - grid[i][j] -> 0 | 1\n    - 1 <= capacity <= 10\n    \"\"\"\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"Input array must contain only non-negative integers\")\n    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly \n    n consonants, in the order these words appear in the string s.\n    \n    If the string s is empty then the function returns an empty list.\n    \n    Parameters:\n    s (str): Input string containing only letters and spaces.\n    n (int): Number of consonants to filter words by.\n    \n    Returns:\n    list: List of words containing exactly n consonants in the order they appear in the input string.\n    \"\"\"\n    consonant_letters = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    result = []\n    \n    if not s:\n        return result\n    \n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter in consonant_letters)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Expected output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Expected output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Expected output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Expected output: \"\"\nprint(get_closest_vowel(\"strength\"))  # Expected output: \"e\"\nprint(get_closest_vowel(\"bottle\"))    # Expected output: \"o\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    Check if it is possible to concatenate the two strings in some order\n    such that the resulting string will have balanced parentheses.\n\n    Args:\n    lst: List of two strings containing only '(' and ')' characters.\n\n    Returns:\n    'Yes' if a good string can be formed, 'No' otherwise.\n    '''\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'  # More closing parentheses than opening ones\n                open_count -= 1\n    if open_count == 0:\n        return 'Yes'  # All parentheses are balanced\n    else:\n        return 'No'  # More opening parentheses than closing ones"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \n    Args:\n        arr (List[int]): Input array of integers.\n        k (int): Number of maximum elements to return.\n\n    Returns:\n        List[int]: Sorted list of maximum k numbers in arr.\n    \"\"\"\n    if k > len(arr):\n        return \"Invalid value of k\"\n    \n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_two_digits = 0\n    for num in arr[:k]:\n        if 10 <= num < 100:\n            sum_two_digits += num\n    return sum_two_digits"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. Returned list is sorted in increasing order.\n    \"\"\"\n    def generate_collatz_sequence(num):\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    collatz_sequence = generate_collatz_sequence(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1:\n        words = txt.split(',')\n    if len(words) == 1:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n        return count\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(numbers):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    seen = set()\n    for i in range(len(numbers) - 1):\n        if numbers[i] >= numbers[i + 1] or numbers[i] in seen:\n            return False\n        seen.add(numbers[i])\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    Determine whether the length of the intersection of two intervals is a prime number.\n    \n    Args:\n    interval1, interval2: Tuples representing closed intervals where start <= end\n    \n    Returns:\n    \"YES\" if the length of the intersection is a prime number, otherwise \"NO\"\n    \"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "from typing import List\n\ndef prod_signs(arr: List[int]) -> int:\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    start = min(min(row) for row in grid)\n    path = [start]\n    visited = {(i, j) for i in range(n) for j in range(n) if grid[i][j] == start}\n\n    while len(path) < k:\n        neighbors = [(i, j) for i, j in visited if i > 0 and (i-1, j) not in visited]\n        neighbors += [(i, j) for i, j in visited if i < n-1 and (i+1, j) not in visited]\n        neighbors += [(i, j) for i, j in visited if j > 0 and (i, j-1) not in visited]\n        neighbors += [(i, j) for i, j in visited if j < n-1 and (i, j+1) not in visited]\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]])\n        path.append(grid[next_cell[0]][next_cell[1]])\n        visited.add(next_cell)\n\n    return path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    \n    tribonacci = [3, 1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2\n\n# Test cases\nprint(is_nested('[[]]'))  # Expected output: True\nprint(is_nested('[]]]]]]][[[[[]'))  # Expected output: False\nprint(is_nested('[][]'))  # Expected output: False\nprint(is_nested('[]'))  # Expected output: False\nprint(is_nested('[[][]]'))  # Expected output: True\nprint(is_nested('[[]][['))  # Expected output: True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt.split()) == 1 or txt.split()[-1] == ''):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "def largest_index_not_greater(arr):\n    result_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result_index = i - 1\n    return result_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(\",\", \".\")\n        return float(value)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with a single hyphen '-'\n    \n    Args:\n    text (str): The input string\n    \n    Returns:\n    str: The modified string with spaces replaced as per the rules\n    \"\"\"\n    text = text.replace(' ', '_')\n    \n    result = []\n    consecutive_spaces_count = 0\n    \n    for char in text:\n        if char == '_':\n            consecutive_spaces_count += 1\n            if consecutive_spaces_count > 2:\n                result[-2:] = ['-']\n                consecutive_spaces_count = 1\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n            consecutive_spaces_count = 0\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if (i + 1) % 3 == 0:\n            total += lst[i] ** 2\n        elif (i + 1) % 4 == 0 and (i + 1) % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    a_values = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a_values[i] + a_values[j] + a_values[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        result = planets[start_idx+1:end_idx]\n    else:\n        result = planets[end_idx+1:start_idx]\n    \n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def filter_and_sort_words(lst):\n    \"\"\"\n    Filter out words with odd lengths from the input list of strings,\n    and return the resulting list sorted by length and then alphabetically.\n    \n    Args:\n    lst (list): List of strings\n    \n    Returns:\n    list: Filtered and sorted list of strings\n    \"\"\"\n    filtered_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(filtered_words, key=lambda x: (len(x), x))\n    \n    return sorted_words"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    # Filter out odd, non-negative integers and sum their squares\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = {ext: sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions}\n    strongest_ext = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    return b in double_a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Return the word with the maximum number of unique characters.\n    If multiple strings have the same maximum number of unique characters, return the one that comes first in lexicographical order.\n    \n    Args:\n        words (list): List of strings\n    \n    Returns:\n        str: Word with the maximum number of unique characters\n    \"\"\"\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \"\"\"\n    # Calculate the total number of eaten carrots and the number of carrots left after the meals\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Number of operators should be one less than the number of operands.\")\n    \n    if any(num < 0 for num in operand):\n        raise ValueError(\"Operands should be non-negative integers.\")\n    \n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.upper() if char.islower() else char.lower())\n        else:\n            result.append(char)\n    result = ''.join(result)\n    \n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    Args:\n    a (int): Starting integer\n    b (int): Ending integer\n\n    Returns:\n    list: List of even digits between a and b\n    \"\"\"\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
